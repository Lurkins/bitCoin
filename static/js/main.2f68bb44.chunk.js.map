{"version":3,"sources":["Chart.js","App.js","serviceWorker.js","index.js"],"names":["data","name","price","Chart","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","activeDot","r","PureComponent","jsfiddleUrl","url","App","props","getData","e","preventDefault","axios","method","then","res","state","selectedOption","symbol","String","fromCharCode","money","bpi","USD","rate_float","toFixed","setState","amount","currencySign","selectAlert","GBP","EUR","catch","error","console","log","handleOptionChange","currentTarget","value","className","this","id","checked","onChange","htmlFor","onClick","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f68bb44.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nconst data = [\n  {\n    name: 'JAN', price: 3416,\n  },\n  {\n    name: 'FEB', price: 3813,\n  },\n  {\n    name: 'MAR', price: 4126,\n  },\n  {\n    name: 'APR', price: 5304,\n  },\n  {\n    name: 'MAY', price: 8543,\n  },\n  {\n    name: 'JUN', price: 10691,\n  },\n  {\n    name: 'JUL', price: 10083,\n  },\n  {\n    name: 'AUG', price: 9626,\n  },\n  {\n    name: 'SEP', price: 8362,\n  },\n  {\n    name: 'OCT', price: 9155,\n  },\n  {\n    name: 'NOV', price: 7352,\n  },\n];\n\nexport default class Chart extends PureComponent {\n  static jsfiddleUrl = 'https://jsfiddle.net/alidingling/xqjtetw0/';\n\n  render() {\n    return (\n      <LineChart\n        width={500}\n        height={300}\n        data={data}\n        margin={{\n          top: 5, right: 30, left: 20, bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n      </LineChart>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\nimport Chart from './Chart.js';\n\nlet url = \"https://api.coindesk.com/v1/bpi/currentprice.json\"\n\nclass App extends Component {\n  constructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n      amount: '',\n      selectedOption: '',\n      currencySign: '',\n      selectAlert: false,\n\t\t}\n  }\n\n  getData = (e) => {\n    e.preventDefault();\n    axios({\n      url: url,\n      method: 'GET'\n    })\n    .then((res) => {\n      if (this.state.selectedOption === 'usd'){\n        let symbol = String.fromCharCode(36);\n        let currencyAmount = res.data.bpi.USD.rate_float;\n        let money = currencyAmount.toFixed(2);\n        this.setState({\n          amount: money,\n          currencySign: symbol,\n          selectAlert: false,\n        })\n      } else if (this.state.selectedOption === 'gbp') {\n          let symbol = String.fromCharCode(163);\n          let currencyAmount = res.data.bpi.GBP.rate_float;\n          let money = currencyAmount.toFixed(2);\n          this.setState({\n            amount: money,\n            currencySign: symbol,\n            selectAlert: false,\n          })\n      } else if (this.state.selectedOption === 'eur') {\n          let symbol = String.fromCharCode(8364);\n          let currencyAmount = res.data.bpi.EUR.rate_float;\n          let money = currencyAmount.toFixed(2);\n          this.setState({\n            amount: money,\n            currencySign: symbol,\n            selectAlert: false,\n          })\n      } else {\n        this.setState({\n          selectAlert: true,\n        })\n      }\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  handleOptionChange = (e) => {\n    this.setState({\n      selectedOption: e.currentTarget.value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1 className=\"text-center my-5\">BitCoin Price App</h1>\n                </div>               \n            </div>\n        </div>  \n        <div className=\"container\">\n          <div className=\"row\">\n              <div className=\"col-12\">\n                <h2 className=\"text-center\">Current price:</h2>\n                <div className=\"App-amount text-success\">\n                  {this.state.currencySign}{this.state.amount}\n                </div>\n              </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-12\">\n              {this.state.selectAlert ? <p className=\"text-center text-danger\">Select your currency</p> : <p className=\"text-center\">Select your currency</p>}\n            </div>\n            <div className=\"col-12 d-flex justify-content-center\">\n              <form>\n                  <div className=\"form-check form-check-inline text-center\">\n                      <input \n                        className=\"form-check-input\" \n                        type=\"radio\" \n                        name=\"currency\" \n                        id=\"inlineRadio1\" \n                        value=\"usd\" \n                        checked={this.state.selectedOption === 'usd'}\n                        onChange={this.handleOptionChange}\n                      />\n                      <label className=\"form-check-label\" htmlFor=\"inlineRadio1\">USD</label>\n                  </div>\n                  <div className=\"form-check form-check-inline\">\n                      <input \n                        className=\"form-check-input\" \n                        type=\"radio\" name=\"currency\" \n                        id=\"inlineRadio2\" \n                        value=\"gbp\" \n                        checked={this.state.selectedOption === 'gbp'} \n                        onChange={this.handleOptionChange}\n                      />\n                      <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">GBP</label>\n                  </div>\n                  <div className=\"form-check form-check-inline\">\n                      <input \n                        className=\"form-check-input\" \n                        type=\"radio\" name=\"currency\" \n                        id=\"inlineRadio3\" \n                        value=\"eur\"\n                        checked={this.state.selectedOption === 'eur'} \n                        onChange={this.handleOptionChange}\n                      />\n                      <label className=\"form-check-label\" htmlFor=\"inlineRadio3\">EUR</label>\n                  </div>\n                  <div className=\"d-flex justify-content-center mb-5\">\n                      <input \n                        onClick={this.getData} \n                        className=\"mt-4 btn btn-primary\" \n                        type=\"submit\" \n                        value=\"Get Price!\" \n                      />\n                  </div> \n              </form>\n            </div>\n          </div>\n          <div className=\"row mb-5\">\n            <div className=\"col-12\">\n              <p className=\"text-center\"><a href=\"https://www.coindesk.com/price/bitcoin\">Powered by CoinDesk</a></p>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <h4 className=\"text-center\">BitCoin price 2019 in USD</h4>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-12 d-flex justify-content-center\">\n              <Chart />\n            </div>\n            \n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App basename={process.env.PUBLIC_URL} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}